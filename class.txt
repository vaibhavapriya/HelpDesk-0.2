Layer	Classes
Core	Controller, Model, Router, Auth, Mailer
Models	User, Ticket, Answer
Controllers	AuthController, TicketController, AnswerController
Helpers	Validator, Response

$router = new Router();

$router->post('/api/register', 'AuthController@register');
$router->post('/api/login', 'AuthController@login');
$router->get('/api/me', 'AuthController@me');

$router->post('/api/tickets', 'TicketController@submit');
$router->get('/api/tickets', 'TicketController@list');
$router->get('/api/tickets/{id}', 'TicketController@view');

$router->post('/api/tickets/{id}/answer', 'AnswerController@answer');

$router->resolve();


Controller
namespace App\Controllers;

use App\Database\DB;

class ResetPasswordController {
    public function showPostForm() {
        require __DIR__ . '/../../views/resetpassword.view.php';
    }

    public function storePost() {
        $conn = DB::getConnection(); // static method to fetch DB connection

        // Your logic from storePost() goes here, with $conn instead of global
    }
}

routes
namespace App\Core;

class Router {
    protected $routes = [];

    public function add($uri, $controller, $method, $middleware = []) {
        $this->routes[$uri] = compact('controller', 'method', 'middleware');
    }

    public function dispatch($uri) {
        if (!isset($this->routes[$uri])) {
            http_response_code(404);
            exit("404 Not Found");
        }

        $route = $this->routes[$uri];
        foreach ($route['middleware'] as $middlewareClass) {
            (new $middlewareClass)->handle();
        }

        $controller = new $route['controller'];
        call_user_func([$controller, $route['method']]);
    }
}


In public/index.php:

require_once __DIR__ . '/../vendor/autoload.php';

use App\Core\Router;
use App\Controllers\ResetPasswordController;
use App\Middleware\AuthMiddleware;

session_start();

$router = new Router();

$router->add('/resetPassword', ResetPasswordController::class, 'showPostForm');
$router->add('/resetPassword/post', ResetPasswordController::class, 'storePost', [
    AuthMiddleware::class
]);

$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
$router->dispatch($uri);


front end

fetch('/resetPassword/post', {
  method: 'POST',
  headers: {
  },
  body: 
});

use app\controller\HomeController;
if (class_exists(\app\controller\HomeController::class)) {
    echo "✅ HomeController loaded successfully<br>";
} else {
    echo "❌ HomeController NOT loaded<br>";
}

    <!-- Success & Error Alerts -->
    <?php if (isset($_GET['error'])): ?>
      <div class="alert alert-danger d-flex align-items-center" role="alert">
        <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:">
          <use xlink:href="#exclamation-triangle-fill" />
        </svg>
        <div><?= htmlspecialchars($_GET['error']) ?></div>
      </div>
    <?php endif; ?>

    <?php if (isset($_GET['success'])): ?>
      <div class="alert alert-success d-flex align-items-center" role="alert">
        <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:">
          <use xlink:href="#check-circle-fill" />
        </svg>
        <div><?= htmlspecialchars($_GET['success']) ?></div>
      </div>
    <?php endif; ?>

    <?php 
require_once __DIR__ . '/components/header.php'; 
require_once __DIR__ . '/components/sidebar.php';
if (!isset($_SESSION['jwt_token']) || empty($_SESSION['jwt_token'])) {
  header("Location: /HelpDesk2/login?error=" . urlencode("Please log in again."));
  exit;
}?>

<main class="container py-5">
  <div class="container">
    <h2 class="mb-4">Edit Profile</h2>

    <!-- Status Alerts -->
    <div id="success" role="alert"></div>
    <div id="error" role="alert"></div>

    <div class="row">
      <!-- Update Profile -->
      <div class="col-md-6 mb-4">
        <div class="card shadow-sm">
          <div class="card-body">
            <h5 class="card-title mb-3">Update Profile</h5>
            <form action="profile/post" method="POST" id="profieform">
              <div class="mb-3">
                <label for="name" class="form-label">Name 
                  <i class="fa-solid fa-pen ms-2 edit-icon" onclick="makeEditable('name')"></i>
                </label>
                <input type="text" class="form-control" id="name" name="name" readonly>
              </div>

              <div class="mb-3">
                <label for="email" class="form-label">Email 
                  <i class="fa-solid fa-pen ms-2 edit-icon" onclick="makeEditable('email')"></i>
                </label>
                <input type="email" class="form-control" id="email" name="email" readonly>
              </div>

              <div class="mb-3">
                <label for="phone" class="form-label">Phone No 
                  <i class="fa-solid fa-pen ms-2 edit-icon" onclick="makeEditable('phone')"></i>
                </label>
                <input type="text" class="form-control" id="phone" name="phone" readonly>
              </div>

              <div class="d-grid">
                <button type="submit" class="btn btn-primary">Update Profile</button>
              </div>
            </form>
          </div>
        </div>
      </div>

      <!-- Change Password -->
      <div class="col-md-6">
        <div class="card shadow-sm">
          <div class="card-body">
            <h5 class="card-title mb-3">Change Password</h5>
            <form action="profile/password/post" method="POST" id= 'changepassword'>
              <div class="mb-3">
                <label for="old_password" class="form-label">Old Password</label>
                <input type="password" class="form-control" name="old_password" required>
              </div>
              <div class="mb-3">
                <label for="new_password" class="form-label">New Password</label>
                <input type="password" class="form-control" name="new_password" required>
              </div>
              <div class="mb-3">
                <label for="confirm_password" class="form-label">Confirm New Password</label>
                <input type="password" class="form-control" name="confirm_password" required>
              </div>
              <div class="d-grid">
                <button type="submit" class="btn btn-warning" >Change Password</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>
<script>
function makeEditable(fieldId) {
  const input = document.getElementById(fieldId);
  input.removeAttribute("readonly");
  input.focus();
}

// Show status messages from GET parameters
const urlParams = new URLSearchParams(window.location.search);
const successMsg = urlParams.get('success');
const errorMsg = urlParams.get('error');

if (successMsg) {
  const successEl = document.getElementById('success');
  successEl.classList.add('alert', 'alert-success');
  successEl.textContent = successMsg;
}

if (errorMsg) {
  const errorEl = document.getElementById('error');
  errorEl.classList.add('alert', 'alert-danger');
  errorEl.textContent = errorMsg;
}

function resetStatusMessages() {
  ['success', 'error'].forEach(id => {
    const el = document.getElementById(id);
    if (el) {
      el.textContent = '';
      el.classList.remove('alert', 'alert-success', 'alert-danger');
    }
  });
}
  async function fetchProfile() {
    try {
      const response = await fetch('profile/get', {
        method: 'GET',
        headers: {
          'Authorization': 'Bearer <?= $_SESSION['jwt_token'] ?>'
        }
      });

      const result = await response.json();
      console.log(result);

      if (result.status === "success") {
        const user = result.data;
        document.getElementById("name").value = user.name;
        document.getElementById("email").value = user.email;
        document.getElementById("phone").value = user.phone || "";
      } else {
        const errorEl = document.getElementById('error');
        errorEl.classList.add('alert', 'alert-danger');
        errorEl.textContent = "Could not load user data.";
      }
    }catch (error) {
      console.error(error);
      const errorEl = document.getElementById('error');
        errorEl.classList.add('alert', 'alert-danger');
        errorEl.textContent = 'Server error. Please try again.';
    }
    
  }
  fetchProfile();
  document.getElementById('profieform').addEventListener('submit', async function(event) {
  event.preventDefault();
  resetStatusMessages();

  const formData = new FormData(this);

  try {
    const response = await fetch('profile/post', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer <?= $_SESSION['jwt_token'] ?>'
      },
      body: formData
    });

    const result = await response.json();

    if (result.status === 'success') {
      const successEl = document.getElementById("success");
      successEl.classList.add("alert", "alert-success");
      successEl.textContent = result.message ?? "Profile updated successfully!";
    } else {
      const errorEl = document.getElementById("error");
      errorEl.classList.add("alert", "alert-danger");
      errorEl.textContent = result.message ?? "Profile update failed.";
    }
  } catch (error) {
    console.error('Error:', error);
    const errorEl = document.getElementById('error');
    errorEl.classList.add("alert", "alert-danger");
    errorEl.textContent = "Server error. Please try again.";
  }
});

// Handle password change
document.getElementById('changepassword').addEventListener('submit', async function(event) {
  event.preventDefault();
  resetStatusMessages();

  const formData = new FormData(this);

  try {
    const response = await fetch('profile/password/post', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer <?= $_SESSION['jwt_token'] ?>'
      },
      body: formData
    });

    const result = await response.json();

    if (result.status === 'success') {
      const successEl = document.getElementById("success");
      successEl.classList.add("alert", "alert-success");
      successEl.textContent = result.message ?? "Password changed successfully!";
      this.reset(); // Clear password fields
    } else {
      const errorEl = document.getElementById("error");
      errorEl.classList.add("alert", "alert-danger");
      errorEl.textContent = result.message ?? "Password change failed.";
    }
  } catch (error) {
    console.error('Error:', error);
    const errorEl = document.getElementById('error');
    errorEl.classList.add("alert", "alert-danger");
    errorEl.textContent = "Server error. Please try again.";
  }
   });
</script>

<?php require_once __DIR__ . '/components/footer.php'; ?>

